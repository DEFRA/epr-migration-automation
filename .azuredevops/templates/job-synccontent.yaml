
parameters:
- name: JobName
  type: string
  default: SyncContentJob
- name: HostedAgentPool
  displayName: Hosted agent pool to run on
  type: string
  default: windows-latest
- name: SourceAdoRepo
  type: string
- name: TargetGitHubRepo
  type: string
- name: GitLeaksFailureAsWarning
  type: boolean
  default: false
- name: GitLeaksReportPublishOnlyOnFail
  type: boolean
  default: true 
- name: GitLeaksReportArtifactName
  type: string
  default: Report
- name: GitLeaksReportFormat
  type: string
  default: json
  values:
  - sarif
  - json
  - csv
  - junit
- name: GitLeaksSuppressHistoryCheck
  type: boolean
  default: false
- name: WhatIf
  displayName: WhatIf
  type: boolean
  default: true
- name: Trunk
  type: string
  default: main
- name: DependsOn 
  type: object
  default: ''

jobs:
- job: ${{ parameters.JobName }}
  dependsOn: ${{ parameters.DependsOn }}
  pool: 
    vmImage: ${{ parameters.HostedAgentPool }}
  displayName: Sync ${{ parameters.SourceAdoRepo }} to ${{ parameters.TargetGitHubRepo }}
  variables: 
  - name: sourceRepoSubDir
    value: s/ado-source
  - name: targetRepoSubDir
    value: s/github-target
  - name: sourceRepoRoot
    value: $(Pipeline.Workspace)/${{ variables.sourceRepoSubDir }}
  - name: targetRepoRoot
    value: $(Pipeline.Workspace)/${{ variables.targetRepoSubDir }}
  - ${{ if eq( parameters.GitLeaksSuppressHistoryCheck, true) }}:
    - name: fetchDepth
      value: 1
    - name: gitLeaksScanMode
      value: directory
  - ${{ else }}:
    - name: fetchDepth
      value: 0
    - name: gitLeaksScanMode
      value: all

  steps: 
  - checkout: ${{ parameters.SourceAdoRepo }}
    path: ${{ variables.sourceRepoSubDir }}
    clean: true
    persistCredentials: true
    fetchDepth: ${{ variables.fetchDepth }}

  - checkout: self
    path: s/local
    clean: true

  - pwsh: |
      [System.IO.DirectoryInfo]$repoRootDir = '${{ variables.sourceRepoRoot }}'
      [string]$ignoreFilename = '.gitleaksignore'
      Write-Host "Searching for $ignoreFilename under $($repoRootDir.FullName)"

      [array]$gitleaksIgnoreFiles = @(dir $repoRootDir.FullName -Recurse -Force | Where-Object -FilterScript { $_.Name -eq $ignoreFilename })

      if ($gitleaksIgnoreFiles.Count -eq 0) {
        Write-Host "Found no $ignoreFilename files"
      } else {
        if ($gitleaksIgnoreFiles.Count -eq 1) {
          Write-Host "Found 1 $ignoreFilename file:"
        } else {
          Write-Warning "Found $($gitleaksIgnoreFiles.Count) $ignoreFilename files when at most 1 was expected."
        }

        $gitLeaksIgnoreFiles | ForEach-Object -Process { 
          Write-Host $_.FullName 
        }

        $gitLeaksIgnoreFiles | ForEach-Object -Process { 
          [array]$output = @()
          [array]$lines = Get-Content -Path $_.FullName

          Write-Host "Original contents of $($_.FullName):"
          $lines | ForEach-Object -Process { Write-Host $_ }

          Write-Host "New contents of $($_.FullName):"

          foreach($line in $lines) {
            [string]$trimmed = $line.Trim()
            [string]$outputLine = ''
            if ($trimmed.StartsWith('#')) {
              $outputLine = $line
            } elseif ([string]::IsNullOrWhitespace($trimmed)) {
              $outputLine = $line
            } else {
              [array]$parts = $line.Split(':')
              # if it has 3 parts, it's a nogit entry with a relative path
              # if it has 4 parts, it's a full scan with a commit hash
              if ($parts.Length -eq 3) {
                $parts[0] = Join-Path -Path $repoRootDir -ChildPath $parts[0]
                $outputLine = $parts -Join ':'
              }
              else {
                $outputLine = $line
              }
            }
            Write-Host $outputLine
            $output += $outputLine
          }

          $output | Set-Content -Path $_.FullName -Force

          Write-Host "$($_.FullName) updated."
        }
      }
    displayName: Update ignore files

  - task: Gitleaks@3
    displayName: Gitleaks Scan
    inputs:
      scanmode: ${{ variables.gitLeaksScanMode }}
      scanlocation: ${{ variables.sourceRepoRoot }}
      configtype: custom
      configfile: $(Build.Repository.LocalPath)/gitleaks/gitleaks.toml
      reportname: ${{ parameters.SourceAdoRepo }}
      reportformat: ${{ parameters.GitLeaksReportFormat }}
      redact: false
      verbose: true
      taskfail: ${{ not(parameters.GitLeaksFailureAsWarning) }}
      uploadresults: false

  - publish: $(Agent.TempDirectory)/${{ parameters.SourceAdoRepo }}.${{ parameters.GitLeaksReportFormat }}
    artifact: ${{ parameters.GitLeaksReportArtifactName }}-$(System.JobAttempt)
    displayName: Publish ${{ parameters.GitLeaksReportArtifactName }}
    ${{ if and( eq(parameters.GitLeaksReportPublishOnlyOnFail, true), eq(parameters.GitLeaksFailureAsWarning, false) ) }}:
      condition: failed()
    ${{ else }}:
      condition: always()

  - pwsh: |
      Push-Location -Path ${{ variables.sourceRepoRoot }}
      git reset --hard
      Pop-Location
    displayName: Undo gitleaks ignore change

  - checkout: github-${{ parameters.TargetGitHubRepo }}
    path: ${{ variables.targetRepoSubDir }}
    clean: true
    persistCredentials: true

  - pwsh: |
      Push-Location -Path ${{ variables.targetRepoRoot }}
      git fetch
      git checkout ${{ parameters.Trunk }}
      git pull
      Pop-Location
    displayName: Connect target repo

  - pwsh: | 
      Write-Host "Syncing changes from ${{ variables.sourceRepoRoot }} to ${{ variables.targetRepoRoot }}"
      robocopy ${{ variables.sourceRepoRoot }} ${{ variables.targetRepoRoot }} /mir /xd .git 
      [int]$exitCode = $LASTEXITCODE
      Write-Host "robocopy exit code $exitCode"
      if ($exitCode -ge 8) {
        throw "Robocopy returned error code $LASTEXITCODE"
      }
      else {
        exit 0
      }
    displayName: Sync contents

  - pwsh: |
      dir $(Pipeline.Workspace) -Recurse | Sort-Object -Property FullName | ForEach-Object { Write-Host $_.FullName }
    displayName: "diags - after copy"

  - ${{ if ne( parameters.WhatIf, false) }}:
    - pwsh: | 
        Write-Host "WhatIf: would push to github repo ${{ parameters.TargetGitHubRepo }}"
      displayName: "WhatIf: Push to ${{ parameters.TargetGitHubRepo }}"
  - ${{ else }}:
    - pwsh: | 
        Write-Host "Pushing to github repo ${{ parameters.TargetGitHubRepo }}"
        Push-Location -Path ${{ variables.targetRepoRoot }}
        git config --global user.email "buildservice@dev.azure.com"
        git config --global user.name "Build Service"
        git stage .
        if ($LASTEXITCODE -ne 0) {
          Write-Host "git stage returned error code $LASTEXITCODE"
          Write-Host "Assuming no changes to stage"
        }
        else {
          git commit -m "Refreshed from ADO"
          if ($LASTEXITCODE -eq 0) {
            git push
            if ($LASTEXITCODE -ne 0) {
              throw "git push returned error code $LASTEXITCODE"
            }
          }
          else {
            Write-Host "git commit returned error code $LASTEXITCODE"
            Write-Host "Assuming no changes to push"
          }
        }
        Pop-Location
        Write-Host "Done"
        exit 0
      displayName: Push to ${{ parameters.TargetGitHubRepo }}