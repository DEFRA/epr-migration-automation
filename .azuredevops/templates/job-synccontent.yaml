
parameters:
- name: JobName
  type: string
  default: SyncContentJob
- name: HostedAgentPool
  displayName: Hosted agent pool to run on
  type: string
  default: windows-latest
- name: SourceAdoRepo
  type: string
- name: TargetGitHubRepo
  type: string
- name: GitLeaksFailureAsWarning
  type: boolean
  default: false
- name: GitLeaksReportPublishOnlyOnFail
  type: boolean
  default: true 
- name: GitLeaksReportArtifactName
  type: string
  default: Report
- name: GitLeaksSuppressHistoryCheck
  type: boolean
  default: false
- name: WhatIf
  displayName: WhatIf
  type: boolean
  default: true
- name: Trunk
  type: string
  default: main
- name: DependsOn 
  type: object
  default: ''

jobs:
- job: ${{ parameters.JobName }}
  dependsOn: ${{ parameters.DependsOn }}
  pool: 
    vmImage: ${{ parameters.HostedAgentPool }}
  displayName: Sync ${{ parameters.SourceAdoRepo }} to ${{ parameters.TargetGitHubRepo }}
  variables: 
  - name: sourceRepoSubDir
    value: s/ado-source
  - name: targetRepoSubDir
    value: s/github-target
  - name: sourceRepoRoot
    value: $(Pipeline.Workspace)/${{ variables.sourceRepoSubDir }}
  - name: targetRepoRoot
    value: $(Pipeline.Workspace)/${{ variables.targetRepoSubDir }}
  - name: ReportFile
    value: $(Build.StagingDirectory)/reports/${{ parameters.SourceAdoRepo }}.json

  steps: 
  - checkout: ${{ parameters.SourceAdoRepo }}
    path: ${{ variables.sourceRepoSubDir }}
    clean: true
    persistCredentials: true

  - checkout: self
    clean: true

  - template: steps-gitleaksscan.yaml
    parameters: 
      GitLeaksReportArtifactName: gitleaks-${{ parameters.SourceAdoRepo }}
      ReportFile: $(Build.StagingDirectory)/reports/${{ parameters.SourceAdoRepo }}.json
      PublishOnlyOnFail: ${{ parameters.GitLeaksReportPublishOnlyOnFail }}
      TreatFailureAsWarning: ${{ parameters.GitLeaksFailureAsWarning }}
      ScanRootDir: ${{ variables.sourceRepoRoot }}
      SuppressHistoryCheck: ${{ parameters.GitLeaksSuppressHistoryCheck }}
      GitLeaksConfigFile: ${{ variables.sourceRepoRoot}}/.gitleaks/config.toml

  - checkout: github-${{ parameters.TargetGitHubRepo }}
    path: ${{ variables.targetRepoSubDir }}
    clean: true
    persistCredentials: true

  - pwsh: |
      Push-Location -Path ${{ variables.targetRepoRoot }}
      git fetch
      git checkout ${{ parameters.Trunk }}
      git pull
      Pop-Location
    displayName: Connect target repo

  - pwsh: | 
      Write-Host "Syncing changes from ${{ variables.sourceRepoRoot }} to ${{ variables.targetRepoRoot }}"
      robocopy ${{ variables.sourceRepoRoot }} ${{ variables.targetRepoRoot }} /mir /xd .git /xd .github 
      [int]$exitCode = $LASTEXITCODE
      Write-Host "robocopy exit code $exitCode"
      if ($exitCode -ge 8) {
        throw "Robocopy returned error code $LASTEXITCODE"
      }
      else {
        exit 0
      }
    displayName: Sync contents

  - pwsh: |
      dir $(Pipeline.Workspace) -Recurse | Sort-Object -Property FullName | ForEach-Object { Write-Host $_.FullName }
    displayName: "diags - after copy"

  - ${{ if ne( parameters.WhatIf, false) }}:
    - pwsh: | 
        Write-Host "WhatIf: would push to github repo ${{ parameters.TargetGitHubRepo }}"
      displayName: "WhatIf: Push to ${{ parameters.TargetGitHubRepo }}"
  - ${{ else }}:
    - pwsh: | 
        Write-Host "Pushing to github repo ${{ parameters.TargetGitHubRepo }}"
        Push-Location -Path ${{ variables.targetRepoRoot }}
        git config --global user.email "buildservice@dev.azure.com"
        git config --global user.name "Build Service"
        git stage .
        if ($LASTEXITCODE -ne 0) {
          Write-Host "git stage returned error code $LASTEXITCODE"
          Write-Host "Assuming no changes to stage"
        }
        else {
          git commit -m "Refreshed from ADO"
          if ($LASTEXITCODE -eq 0) {
            git push
            if ($LASTEXITCODE -ne 0) {
              throw "git push returned error code $LASTEXITCODE"
            }
          }
          else {
            Write-Host "git commit returned error code $LASTEXITCODE"
            Write-Host "Assuming no changes to push"
          }
        }
        Pop-Location
        Write-Host "Done"
        exit 0
      displayName: Push to ${{ parameters.TargetGitHubRepo }}