
parameters:
- name: GitLeaksExe
  type: string
  default: '$(Build.Repository.LocalPath)/$(Build.Repository.Name)/gitleaks/gitleaks.exe'
- name: GitLeaksConfigFile
  type: string
  default: '$(Build.Repository.LocalPath)/$(Build.Repository.Name)/gitleaks/gitleaks.toml'
- name: GitLeaksReportArtifactName
  type: string
  default: Report
- name: ScanRootDir
  type: string
  default: $(Build.Repository.LocalPath)/$(Build.Repository.Name)
- name: ReportFile
  type: string
  default: $(Build.StagingDirectory)/reports/gitleaks-report.json
- name: SuppressHistoryCheck
  type: boolean
  default: false
- name: PublishOnlyOnFail
  type: boolean
  default: true
- name: Branch
  type: string
  default: main
- name: TreatFailureAsWarning
  type: boolean
  default: false

steps: 

- ${{ if ne(parameters.SuppressHistoryCheck, true) }}:
  - pwsh: |
      Push-Location -Path ${{ parameters.ScanRootDir }}
      git fetch
      git checkout ${{ parameters.Branch }}
      git pull
      Pop-Location
    displayName: Ensure Full History

- pwsh: | 
    Push-Location -Path '${{ parameters.ScanRootDir }}'

    [bool]$treatFailureAsWarning = ('${{ parameters.TreatFailureAsWarning }}' -eq 'true' )
    [bool]$suppressHistoryCheck = ('${{ parameters.SuppressHistoryCheck }}' -eq 'true' )
    Write-Host "treatFailureAsWarning=$treatFailureAsWarning"
    Write-Host "suppressHistoryCheck=$suppressHistoryCheck"

    [System.IO.FileInfo]$gitLeaksExe = '${{ parameters.GitLeaksExe }}'
    [System.IO.FileInfo]$configFile = '${{ parameters.GitLeaksConfigFile }}'
    [System.IO.FileInfo]$reportFile = '${{ parameters.ReportFile }}'
    
    Write-Host "gitLeaksExe.FullName=$($gitLeaksExe.FullName)"
    Write-Host "configFile.FullName=$($configFile.FullName)"
    Write-Host "reportFile.FullName=$($reportFile.FullName)"

    if (-not $gitLeaksExe.Exists) { throw [System.IO.FileNotFoundException]::new($gitLeaksExe.FullName) }
    if (-not $configFile.Exists) { throw [System.IO.FileNotFoundException]::new($configFile.FullName) }

    if (-not $reportFile.Directory.Exists) {
      Write-Host "Creating directory $($reportFile.Directory.FullName)"
      $reportFile.Directory.Create()
    }

    [System.Text.StringBuilder]$builder = [System.Text.StringBuilder]::new("$($gitLeaksExe.FullName) detect ")
    [void]$builder.Append(" --config '$($configFile.FullName)' ")
    [void]$builder.Append(" --report-path '$($reportFile.FullName)' ")
    [void]$builder.Append(" --verbose --redact ") 
    if ($suppressHistoryCheck) {
      [void]$builder.Append(" --no-git ") 
    }

    [string]$command = $builder.ToString()
    Write-Host "Invoking expression: $command"
    Invoke-Expression -Command $Command 

    [int]$exitCode = $LASTEXITCODE
    Write-Host "LASTEXITCODE=$exitCode"

    if ($exitCode -ne 0 -and $treatFailureAsWarning) {
      Write-Warning "Non-zero exit code suppressed by TreatFailureAsWarning being set."
      Write-Host "##vso[task.complete result=SucceededWithIssues;]"
      $exitCode = 0
    }

    Write-Host "exitCode=$exitCode"
    Pop-Location

    Exit $exitCode
  displayName: "Gitleaks Scan"

- publish: ${{ parameters.ReportFile }}
  artifact: ${{ parameters.GitLeaksReportArtifactName }}
  displayName: Publish ${{ parameters.GitLeaksReportArtifactName }}
  ${{ if and( eq(parameters.PublishOnlyOnFail, true), eq(parameters.TreatFailureAsWarning, false) ) }}:
    condition: failed()
  ${{ else }}:
    condition: always()
