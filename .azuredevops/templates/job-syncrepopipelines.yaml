
parameters:
- name: JobName
  type: string
  default: SyncRepoPipelinesJob
- name: HostedAgentPool
  type: string
  default: ubuntu-latest
- name: GitHubServiceConnection
  type: string
- name: GitHubOrganizationName
  type: string
- name: SourceAdoRepo
  type: string
- name: TargetGitHubRepo
  type: string
- name: PipelinesJsonArtifactName
  type: string
- name: PipelineSecretsArtifactName
  type: string
  default: PipelineSecrets
- name: WhatIf
  type: boolean
  default: true
- name: DependsOn 
  type: object
  default: ''
- name: AdoOrganizationUrl
  type: string
  default: '$(System.CollectionUri)'
- name: AdoTeamProject
  type: string
  default: '$(System.TeamProject)'
- name: AdoAccessToken
  type: string
  default: '$(System.AccessToken)'

jobs:
- job: ${{ parameters.JobName }}
  displayName: Sync Repo Pipelines - ${{ parameters.SourceAdoRepo }}
  dependsOn: ${{ parameters.DependsOn }}
  pool: 
    vmImage: ${{ parameters.HostedAgentPool }}

  variables: 
  - name: sourceRepoSubDir
    value: s/ado-source
  - name: AllPipelinesJsonFile
    value: $(Pipeline.Workspace)/${{ parameters.PipelinesJsonArtifactName }}/pipelines.json
  - name: PipelineSecretsReportFile
    value: $(Pipeline.Workspace)/${{ parameters.PipelineSecretsArtifactName }}/pipeline-secrets.csv
  - ${{ if eq( parameters.WhatIf, true )}}:
    - name: WhatIfForPwsh
      value: '$true'
  - ${{ else }}:
    - name: WhatIfForPwsh
      value: '$false'

  steps: 
  - checkout: ${{ parameters.SourceAdoRepo }}
    path: ${{ variables.sourceRepoSubDir }}
    clean: true
    persistCredentials: true
    fetchDepth: ${{ variables.fetchDepth }}

  - checkout: self
    path: s/local
    clean: true

  - download: current
    artifact: ${{ parameters.PipelinesJsonArtifactName }}
    displayName: Acquire all-pipelines artifact

  - task: PowerShell@2
    displayName: 'Resolve required pipelines - ${{ parameters.SourceAdoRepo }}'
    name: ResolvePipelinesStep
    inputs:
      targetType: filePath
      filePath: $(Build.Repository.LocalPath)/pwsh/resolve-githubpipelines.ps1
      pwsh: true
      arguments: >
        -OrganizationUri '${{ parameters.AdoOrganizationUrl }}'
        -Project '${{ parameters.AdoTeamProject }}'
        -SourceAdoRepo '${{ parameters.SourceAdoRepo }}'
        -TargetGitHubRepo '${{ parameters.TargetGitHubRepo }}'
        -GitHubOrganizationName '${{ parameters.GitHubOrganizationName }}'
        -GitHubServiceConnection '${{ parameters.GitHubServiceConnection }}'
        -InputPath '${{ variables.AllPipelinesJsonFile }}'
        -ADOOutputVariableName 'GitHubPipelinesJson'
    env:
      AZURE_DEVOPS_EXT_PAT: ${{ parameters.AdoAccessToken }}

  - task: PowerShell@2
    displayName: 'Configure Pipelines - ${{ parameters.TargetGitHubRepo }}'
    name: ConfigurePipelines
    inputs:
      targetType: filePath
      filePath: $(Build.Repository.LocalPath)/pwsh/set-pipelines.ps1
      pwsh: true
      arguments: >
        -OrganizationUri '${{ parameters.AdoOrganizationUrl }}'
        -Project '${{ parameters.AdoTeamProject }}'
        -InputJson '$(ResolvePipelinesStep.GitHubPipelinesJson)'
        -SecretsReportPath '${{ variables.PipelineSecretsReportFile }}'
        -SecretsCountAdoVariableName 'SecretsCount'
        -WhatIf:${{ variables.WhatIfForPwsh }}
    env:
      AZURE_DEVOPS_EXT_PAT: ${{ parameters.AdoAccessToken }}

  - pwsh: | 
      dir $(Pipeline.Workspace) -Recurse | Sort-Object -Property FullName | ForEach-Object { Write-Host $_.FullName }
      dir ENV:
    displayName: diags

  - publish: '${{ variables.PipelineSecretsReportFile }}'
    artifact: ${{ parameters.PipelineSecretsArtifactName }}
    displayName: Publish ${{ parameters.PipelineSecretsArtifactName }}
    condition: and(succeeded(), ne(variables['ConfigurePipelines.SecretsCount'],'0'))

    