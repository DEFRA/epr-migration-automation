parameters:
- name: MigrationData
  displayName: Migration Data
  type: object
#  default: #provided as an example for data structure
#  - repo:
#      SourceAdoRepo: epr-migration-test2
#      TargetGitHubRepo: epr-migraiton-test2
#      Action: migrate
#  - repo:
#      SourceAdoRepo: epr-migration-automation
#      TargetGitHubRepo: epr-migraiton-automation
#      Action: synchronize

- name: RenamePrefix
  displayName: Pefix to use when renaming repos
  type: string
  default: ''

- name: GitHubOrganizationName
  displayName: Target GitHub organisation
  type: string

- name: GitHubServiceConnection
  displayName: Service Connection to GitHub
  type: string

- name: WhatIf
  displayName: What If
  type: boolean
  default: true

- name: Trunk
  displayName: Trunk name
  type: string
  default: main

- name: WindowsHostedAgentPool 
  displayName: Which Windows hosted agent pool to use
  type: string
  default: windows-latest

- name: UbuntuHostedAgentPool 
  displayName: Which Ubuntu hosted agent pool to use
  type: string
  default: ubuntu-latest

- name: AllPipelinesJsonArtifactName
  displayName: Name of artifact holding the information on the pipelines
  type: string
  default: AllPipelines

- name: MigrationDataJsonArtifactName
  type: string
  default: MigrationData

- name: GitLeaksFailureAsWarning
  displayName: Treat GitLeaks Failure as Warning
  type: boolean
  default: false

- name: AdoOrganizationUrl
  type: string
  default: '$(System.CollectionUri)'

- name: AdoTeamProject
  type: string
  default: '$(System.TeamProject)'

- name: AdoAccessToken
  type: string
  default: '$(System.AccessToken)'

stages:
- stage: GetPipelineInfoStage
  displayName: Gather Pipeline Info
  dependsOn: ''
  jobs:
  - job: MigrationDataDiagsJob
    displayName: Trace MigrationData
    dependsOn: ''
    pool: 
      vmImage: ${{ parameters.UbuntuHostedAgentPool }}
    variables:
    - name: MigrationDataPath
      value: $(Build.StagingDirectory)/MigrationData.json
    steps: 
    - pwsh: |
        [string]$migrationDataJson = '${{ convertToJson(parameters.MigrationData) }}'
        [System.IO.FileInfo]$migrationDataFile = '${{ variables.MigrationDataPath }}'

        Write-Host "migrationDataFile.FullName=$($migrationDataFile.FullName)"
        Write-Host "migrationDataJson=$migrationDataJson"

        $migrationDataJson | Set-Content -Path $migrationDataFile.FullName
      displayName: Create Migration Data File 

    - publish: ${{ variables.MigrationDataPath }}
      artifact: ${{ parameters.MigrationDataJsonArtifactName }}
      displayName: Publish ${{ parameters.MigrationDataJsonArtifactName }}

  - template: job-getpipelines.yaml
    parameters:
      JobName: GetPipelinesJsonJob
      DependsOn: ''
      HostedAgentPool: ${{ parameters.UbuntuHostedAgentPool }}
      AdoOrganizationUrl: ${{ parameters.AdoOrganizationUrl }}
      AdoTeamProject: ${{ parameters.AdoTeamProject }}
      AdoAccessToken: ${{ parameters.AdoAccessToken }}
      PipelinesJsonArtifactName: ${{ parameters.AllPipelinesJsonArtifactName }}
      Type2Only: true
      EnabledOnly: true
      HostingRepoType: TfsGit

- ${{ each item in parameters.MigrationData }}:
  - template: stage-migrate.yaml
    parameters: 
      StageName: Migrate${{ replace( item.repo.SourceAdoRepo, '-', '') }}Stage
      DependsOn: 
      - GetPipelineInfoStage
      WindowsHostedAgentPool: ${{ parameters.WindowsHostedAgentPool }}
      UbuntuHostedAgentPool: ${{ parameters.UbuntuHostedAgentPool }}
      SourceAdoRepo: ${{ item.repo.SourceAdoRepo }}
      TargetGitHubRepo: ${{ item.repo.TargetGitHubRepo }}
      Mode: ${{ item.repo.Action }}
      RenamePrefix: ${{ parameters.RenamePrefix }}
      GitHubOrganizationName: ${{ parameters.GitHubOrganizationName }}
      GitHubServiceConnection: ${{ parameters.GitHubServiceConnection }}
      AdoOrganizationUrl: ${{ parameters.AdoOrganizationUrl }}
      AdoTeamProject: ${{ parameters.AdoTeamProject }}
      AdoAccessToken: ${{ parameters.AdoAccessToken }}
      AllPipelinesJsonArtifactName: ${{ parameters.AllPipelinesJsonArtifactName }}
      Trunk: ${{ parameters.Trunk }}
      GitLeaksFailureAsWarning: ${{ parameters.GitLeaksFailureAsWarning }}
      WhatIf: ${{ parameters.WhatIf }}


# need to generate reports
# - report the presence of secrets on the target pipeline (because these will not be populated by the automation)
